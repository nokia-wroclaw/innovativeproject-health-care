// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddTribePopup should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddTribePopup />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "content": <Connect(AddTribeForm) />,
      "disabled": false,
      "keepInViewPort": true,
      "on": "click",
      "position": "bottom center",
      "trigger": <Button
        as="button"
        compact={true}
        floated="right"
        icon={true}
        labelPosition="left"
        secondary={true}
      >
        <Icon
          as="i"
          name="plus"
        />
        New tribe
      </Button>,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "content": <Connect(AddTribeForm) />,
        "disabled": false,
        "keepInViewPort": true,
        "on": "click",
        "position": "bottom center",
        "trigger": <Button
          as="button"
          compact={true}
          floated="right"
          icon={true}
          labelPosition="left"
          secondary={true}
        >
          <Icon
            as="i"
            name="plus"
          />
          New tribe
        </Button>,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
