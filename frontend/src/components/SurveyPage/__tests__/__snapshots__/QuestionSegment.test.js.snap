// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QuestionSegment should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <QuestionSegment
    question={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <SegmentGroup
        style={
          Object {
            "marginBottom": 10,
          }
        }
      >
        <Segment>
          <Question
            question={Object {}}
          />
        </Segment>
        <Segment
          attached={true}
        >
          <TextArea
            as="textarea"
            className=""
            placeholder="Tell us more"
            required=""
            rows={3}
          />
        </Segment>
      </SegmentGroup>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Segment>
            <Question
              question={Object {}}
            />
          </Segment>,
          <Segment
            attached={true}
          >
            <TextArea
              as="textarea"
              className=""
              placeholder="Tell us more"
              required=""
              rows={3}
            />
          </Segment>,
        ],
        "style": Object {
          "marginBottom": 10,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Question
              question={Object {}}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "question": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "attached": true,
            "children": <TextArea
              as="textarea"
              className=""
              placeholder="Tell us more"
              required=""
              rows={3}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "textarea",
              "className": "",
              "placeholder": "Tell us more",
              "required": "",
              "rows": 3,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <SegmentGroup
          style={
            Object {
              "marginBottom": 10,
            }
          }
        >
          <Segment>
            <Question
              question={Object {}}
            />
          </Segment>
          <Segment
            attached={true}
          >
            <TextArea
              as="textarea"
              className=""
              placeholder="Tell us more"
              required=""
              rows={3}
            />
          </Segment>
        </SegmentGroup>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Segment>
              <Question
                question={Object {}}
              />
            </Segment>,
            <Segment
              attached={true}
            >
              <TextArea
                as="textarea"
                className=""
                placeholder="Tell us more"
                required=""
                rows={3}
              />
            </Segment>,
          ],
          "style": Object {
            "marginBottom": 10,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Question
                question={Object {}}
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "question": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "attached": true,
              "children": <TextArea
                as="textarea"
                className=""
                placeholder="Tell us more"
                required=""
                rows={3}
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "textarea",
                "className": "",
                "placeholder": "Tell us more",
                "required": "",
                "rows": 3,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
