// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Question should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Question
    question={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <GridColumn
          computer={13}
          mobile={10}
          tablet={13}
        >
          <Header
            as="h5"
            style={
              Object {
                "marginBottom": 0,
              }
            }
          />
          <span />
          <span
            style={
              Object {
                "color": "rgb(235, 40, 40)",
                "fontSize": "x-large",
              }
            }
          >
            
          </span>
        </GridColumn>,
        <GridColumn
          computer={3}
          mobile={6}
          tablet={3}
        >
          <div
            className="flex-space-evenly"
          >
            <Connect(ColoredCheckbox)
              color="green"
              hintText="It's OK"
              question={Object {}}
              value={2}
            />
            <Connect(ColoredCheckbox)
              color="yellow"
              hintText="It's not bad but could be better"
              question={Object {}}
              value={1}
            />
            <Connect(ColoredCheckbox)
              color="red"
              hintText="It's really bad"
              question={Object {}}
              value={0}
            />
          </div>
        </GridColumn>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Header
              as="h5"
              style={
                Object {
                  "marginBottom": 0,
                }
              }
            />,
            <span />,
            <span
              style={
                Object {
                  "color": "rgb(235, 40, 40)",
                  "fontSize": "x-large",
                }
              }
            >
              
            </span>,
          ],
          "computer": 13,
          "mobile": 10,
          "tablet": 13,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "as": "h5",
              "children": undefined,
              "style": Object {
                "marginBottom": 0,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "",
              "style": Object {
                "color": "rgb(235, 40, 40)",
                "fontSize": "x-large",
              },
            },
            "ref": null,
            "rendered": "",
            "type": "span",
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div
            className="flex-space-evenly"
          >
            <Connect(ColoredCheckbox)
              color="green"
              hintText="It's OK"
              question={Object {}}
              value={2}
            />
            <Connect(ColoredCheckbox)
              color="yellow"
              hintText="It's not bad but could be better"
              question={Object {}}
              value={1}
            />
            <Connect(ColoredCheckbox)
              color="red"
              hintText="It's really bad"
              question={Object {}}
              value={0}
            />
          </div>,
          "computer": 3,
          "mobile": 6,
          "tablet": 3,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(ColoredCheckbox)
                color="green"
                hintText="It's OK"
                question={Object {}}
                value={2}
              />,
              <Connect(ColoredCheckbox)
                color="yellow"
                hintText="It's not bad but could be better"
                question={Object {}}
                value={1}
              />,
              <Connect(ColoredCheckbox)
                color="red"
                hintText="It's really bad"
                question={Object {}}
                value={0}
              />,
            ],
            "className": "flex-space-evenly",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "color": "green",
                "hintText": "It's OK",
                "question": Object {},
                "value": 2,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "color": "yellow",
                "hintText": "It's not bad but could be better",
                "question": Object {},
                "value": 1,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "color": "red",
                "hintText": "It's really bad",
                "question": Object {},
                "value": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <GridColumn
            computer={13}
            mobile={10}
            tablet={13}
          >
            <Header
              as="h5"
              style={
                Object {
                  "marginBottom": 0,
                }
              }
            />
            <span />
            <span
              style={
                Object {
                  "color": "rgb(235, 40, 40)",
                  "fontSize": "x-large",
                }
              }
            >
              
            </span>
          </GridColumn>,
          <GridColumn
            computer={3}
            mobile={6}
            tablet={3}
          >
            <div
              className="flex-space-evenly"
            >
              <Connect(ColoredCheckbox)
                color="green"
                hintText="It's OK"
                question={Object {}}
                value={2}
              />
              <Connect(ColoredCheckbox)
                color="yellow"
                hintText="It's not bad but could be better"
                question={Object {}}
                value={1}
              />
              <Connect(ColoredCheckbox)
                color="red"
                hintText="It's really bad"
                question={Object {}}
                value={0}
              />
            </div>
          </GridColumn>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Header
                as="h5"
                style={
                  Object {
                    "marginBottom": 0,
                  }
                }
              />,
              <span />,
              <span
                style={
                  Object {
                    "color": "rgb(235, 40, 40)",
                    "fontSize": "x-large",
                  }
                }
              >
                
              </span>,
            ],
            "computer": 13,
            "mobile": 10,
            "tablet": 13,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "as": "h5",
                "children": undefined,
                "style": Object {
                  "marginBottom": 0,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "style": Object {
                  "color": "rgb(235, 40, 40)",
                  "fontSize": "x-large",
                },
              },
              "ref": null,
              "rendered": "",
              "type": "span",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <div
              className="flex-space-evenly"
            >
              <Connect(ColoredCheckbox)
                color="green"
                hintText="It's OK"
                question={Object {}}
                value={2}
              />
              <Connect(ColoredCheckbox)
                color="yellow"
                hintText="It's not bad but could be better"
                question={Object {}}
                value={1}
              />
              <Connect(ColoredCheckbox)
                color="red"
                hintText="It's really bad"
                question={Object {}}
                value={0}
              />
            </div>,
            "computer": 3,
            "mobile": 6,
            "tablet": 3,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Connect(ColoredCheckbox)
                  color="green"
                  hintText="It's OK"
                  question={Object {}}
                  value={2}
                />,
                <Connect(ColoredCheckbox)
                  color="yellow"
                  hintText="It's not bad but could be better"
                  question={Object {}}
                  value={1}
                />,
                <Connect(ColoredCheckbox)
                  color="red"
                  hintText="It's really bad"
                  question={Object {}}
                  value={0}
                />,
              ],
              "className": "flex-space-evenly",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "color": "green",
                  "hintText": "It's OK",
                  "question": Object {},
                  "value": 2,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "color": "yellow",
                  "hintText": "It's not bad but could be better",
                  "question": Object {},
                  "value": 1,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "color": "red",
                  "hintText": "It's really bad",
                  "question": Object {},
                  "value": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
